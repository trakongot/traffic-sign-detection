let lastScrollTop = 0; const header = document.querySelector(".site-header"); let isScrolling; const hideDelay = 1e3; let isHovering = !1; async function uploadImage(e, t = 2e4) { const i = new AbortController; var n = i.signal, s = new FormData, e = (s.append("image_file", e), setTimeout(() => { i.abort() }, t)); try { var a = await fetch("http://localhost:8080/detect", { method: "POST", body: s, signal: n }); if (console.log(a), clearTimeout(e), a.ok) return a; throw new Error("Network response was not ok") } catch (e) { throw "AbortError" === e.name ? console.error("Request was aborted") : console.error("Fetch error:", e), e } } function drawImageAndBoxes(e, t) { const i = new Image; i.src = URL.createObjectURL(e), i.onload = () => { var e = document.createElement("canvas"); const a = e.getContext("2d"); e.width = i.width, e.height = i.height, a.drawImage(i, 0, 0), 0 < t.length ? (a.strokeStyle = "#00FF00", a.lineWidth = 3, a.font = "18px serif", t.forEach(([e, t, i, n, s]) => { a.strokeRect(e, t, i - e, n - t); i = a.measureText(s).width; a.fillStyle = "#00ff00", a.fillRect(e, t, i + 10, 25), a.fillStyle = "#000000", a.fillText(s, e, t + 18) }), updateResults(e.toDataURL("image/png"), t[0][4])) : updateResults(i.src) } } function updateResults(e, t = 0) { var i = document.querySelector(".result-image"); i.style.backgroundImage = `url(${e})`, i.style.cursor = "pointer", i.classList.remove("no-zoom") } header.addEventListener("mouseenter", () => { isHovering = !0, clearTimeout(isScrolling), header.classList.remove("hidden") }), header.addEventListener("mouseleave", () => { isHovering = !1 }), window.addEventListener("scroll", () => { var e = window.scrollY; 0 === e ? header.classList.remove("hidden") : (e > lastScrollTop ? (clearTimeout(isScrolling), isHovering || (isScrolling = setTimeout(() => { header.classList.add("hidden") }, hideDelay))) : header.classList.remove("hidden"), lastScrollTop = e <= 0 ? 0 : e) }), document.querySelector(".navbar-toggler").addEventListener("click", function () { document.querySelector(".navbar-mobie").classList.toggle("navbar-mobie-active") }), function () { window; var e = document.documentElement; e.classList.remove("no-js"), e.classList.add("js"), document.body.classList.contains("has-animations") && ((window.sr = ScrollReveal()).reveal(".feature, .pricing-table-inner", { duration: 600, distance: "20px", easing: "cubic-bezier(0.5, -0.01, 0, 1.005)", origin: "bottom", interval: 100 }), e.classList.add("anime-ready"), anime.timeline({ targets: ".hero-figure-box-05" }).add({ duration: 400, easing: "easeInOutExpo", scaleX: [.05, .05], scaleY: [0, 1], perspective: "500px", delay: anime.random(0, 400) }).add({ duration: 400, easing: "easeInOutExpo", scaleX: 1 }).add({ duration: 800, rotateY: "-15deg", rotateX: "8deg", rotateZ: "-1deg" }), anime.timeline({ targets: ".hero-figure-box-06, .hero-figure-box-07" }).add({ duration: 400, easing: "easeInOutExpo", scaleX: [.05, .05], scaleY: [0, 1], perspective: "500px", delay: anime.random(0, 400) }).add({ duration: 400, easing: "easeInOutExpo", scaleX: 1 }).add({ duration: 800, rotateZ: "20deg" }), anime({ targets: ".hero-figure-box-01, .hero-figure-box-02, .hero-figure-box-03, .hero-figure-box-04, .hero-figure-box-08, .hero-figure-box-09, .hero-figure-box-10", duration: anime.random(600, 800), delay: anime.random(600, 800), rotate: [anime.random(-360, 360), function (e) { return e.getAttribute("data-rotation") }], scale: [.7, 1], opacity: [0, 1], easing: "easeInOutExpo" })) }(), document.addEventListener("DOMContentLoaded", function () { var t, e = document.querySelector(".splitview"), i = e.querySelector(".top"), n = e.querySelector(".handle"), s = 0; -1 != e.className.indexOf("skewed") && (s = 1e3), e.addEventListener("mousemove", function (e) { t = .5 * (e.clientX - window.innerWidth / 2), n.style.left = e.clientX + t + "px", i.style.width = e.clientX + s + t + "px" }) }), document.getElementById("input-file-img").addEventListener("change", function (e) { var t = e.target.files[0], i = document.querySelector(".result-image"); i.style.backgroundImage = "url(../../../dist/images/result-placeholder.svg)", i.style.cursor = "none", i.classList.add("no-zoom"), !t || "image/jpeg" !== t.type && "image/jpg" !== t.type ? (alert("Please upload a valid JPG/JPEG image."), e.target.value = "") : t.size <= 5242880 ? ((i = new FileReader).onload = function (e) { var t = document.getElementById("preview-image"); t.src = e.target.result, t.style.display = "block", document.getElementById("tryAI-button").disabled = !1 }, i.readAsDataURL(t)) : (alert("File size must be less than 5MB."), e.target.value = "") }), document.querySelector(".btn-del").addEventListener("click", function () { var e = document.getElementById("preview-image"), e = (e.src = "./dist/images/uploadImg.png", e.style.display = "block", document.getElementById("input-file-img").value = "", document.getElementById("tryAI-button").disabled = !0, document.querySelector(".result-image")); e.style.backgroundImage = "url(../../../dist/images/result-placeholder.svg)", e.style.cursor = "none", e.classList.add("no-zoom") }), document.getElementById("tryAI-button").addEventListener("click", async function () { var e = document.getElementById("input-file-img"), t = document.getElementById("tryAI-button"), e = e.files; if (0 === e.length) alert("Please upload an image before submitting!"); else { t.classList.add("loading-active"), t.disabled = !0; try { var i = e[0]; drawImageAndBoxes(i, await (await uploadImage(i)).json()), t.classList.remove("loading-active"), t.disabled = !1 } catch (e) { console.error("Error uploading image:", e), alert("Error uploading image."), t.classList.remove("loading-active"), t.disabled = !1 } } }), document.querySelector(".result-image").addEventListener("click", function () { var e = getComputedStyle(this).backgroundImage.slice(5, -2); e.endsWith(".svg") || (document.querySelector(".lightbox img").src = e, document.querySelector(".lightbox").style.display = "flex") }), document.querySelector(".lightbox").addEventListener("click", function () { this.style.display = "none", this.querySelector("img").src = "" }), document.querySelector(".result-image").addEventListener("click", function () { var e = getComputedStyle(this).backgroundImage.slice(5, -2); document.querySelector(".result-image-zoom").src = e, document.querySelector(".lightbox").style.display = "flex" }), document.querySelector(".lightbox").addEventListener("click", function () { this.style.display = "none" }); const trafic_signs = [{ name: "Vạch qua đường cho người đi bộ", url: "./dist/images/trafic_signs/PedestrianCrossing.jpg", desc: "" }, { name: "Chỉ được rẽ phải", url: "./dist/images/trafic_signs/RightTurnOnly.jpg", desc: "" }, { name: "Đường giao nhau", url: "./dist/images/trafic_signs/Intersection.jpg", desc: "" }, { name: "Cấm rẽ trái", url: "./dist/images/trafic_signs/NoLeftTurn.png", desc: "" }, { name: "Điểm dừng xe bus", url: "./dist/images/trafic_signs/BusStop.png", desc: "" }, { name: "Vòng xuyến", url: "./dist/images/trafic_signs/Roundabout.jpg", desc: "" }, { name: "Cảnh báo có vòng xuyến", url: "./dist/images/trafic_signs/Roundabout2.png", desc: "" }, { name: "Cấm dừng và đậu xe", url: "./dist/images/trafic_signs/NoStoppingAndNoParking.png", desc: "" }, { name: "Cấm quay đầu", url: "./dist/images/trafic_signs/UTurnAllowed.png", desc: "" }, { name: "Phân làn", url: "./dist/images/trafic_signs/LaneAllocation.png", desc: "" }, { name: "Đi chậm", url: "./dist/images/trafic_signs/SlowDown.png", desc: "" }, { name: "Cấm xe tải", url: "./dist/images/trafic_signs/NoTrucksAllowed.png", desc: "" }, { name: "Đường hẹp bên phải", url: "./dist/images/trafic_signs/NarrowRoadOnTheRight.png", desc: "" }, { name: "", url: "./dist/images/trafic_signs/NoPassengerCarsAndTrucks.png", desc: "" }, { name: "Giới hạn chiều cao", url: "./dist/images/trafic_signs/HeightLimit.png", desc: "" }, { name: "Cấm quay đầu trái", url: "./dist/images/trafic_signs/NoLeftUTurn.png", desc: "" }, { name: "Cấm quay đầu phải", url: "./dist/images/trafic_signs/NoRightUTurn.png", desc: "" }, { name: "Cấm quay đầu và cấm rẽ phải", url: "./dist/images/trafic_signs/NoUTurnandNoRightTurn.png", desc: "" }, { name: "Cấm ô tô", url: "./dist/images/trafic_signs/NoCarsAllowed.png", desc: "" }, { name: "Đường hẹp bên trái", url: "./dist/images/trafic_signs/NarrowRoadOnTheLeft.png", desc: "" }, { name: "Đường gồ ghề", url: "./dist/images/trafic_signs/UnevenRoad.png", desc: "" }, { name: "Điểm kiểm tra phương tiện", url: "./dist/images/trafic_signs/CustomsCheckpoint.png", desc: "" }, { name: "Chỉ xe máy", url: "./dist/images/trafic_signs/mortocycle-only.png", desc: "" }, { name: "Chướng ngại vật trên đường", url: "./dist/images/trafic_signs/obstancle-on-the-road.png", desc: "" }, { name: "Trẻ em có mặt", url: "./dist/images/trafic_signs/children-present.png", desc: "" }, { name: "Không có xe tải và container", url: "./dist/images/trafic_signs/no-trucks-and-container.png", desc: "" }, { name: "Cấm xe máy", url: "./dist/images/trafic_signs/no-mortocycles.png", desc: "" }, { name: "Đường Có Camera Giám Sát", url: "./dist/images/trafic_signs/road-with-surveillance-camera.png", desc: "" }, { name: "Cấm Rẽ Phải", url: "./dist/images/trafic_signs/no-right-turn.png", desc: "" }, { name: "Hàng loạt những ngã rẽ nguy hiểm", url: "./dist/images/trafic_signs/series-of-dangerous-turns.png", desc: "" }, { name: "Không được phép cho xe tải", url: "./dist/images/trafic_signs/no-container-allowed.png", desc: "" }, { name: "Cấm rẽ trái hoặc rẽ phải", url: "./dist/images/trafic_signs/no-left-or-right-turn.png", desc: "" }, { name: "Cấm đi thẳng và rẽ phải", url: "./dist/images/trafic_signs/no-straight-or-right-turn.png", desc: "" }, { name: "Nút giao với ngã ba chữ T", url: "./dist/images/trafic_signs/T-junction.png", desc: "" }, { name: "Giới hạn tốc độ (50km/h)", url: "./dist/images/trafic_signs/speed-limit-50km.png", desc: "" }, { name: "Giới hạn tốc độ (60km/h)", url: "./dist/images/trafic_signs/speed-limit-60km.png", desc: "" }, { name: "Giới hạn tốc độ (80km/h)", url: "./dist/images/trafic_signs/speed-limit-80km.png", desc: "" }, { name: "Giới hạn tốc độ (40km/h)", url: "./dist/images/trafic_signs/speed-limit-40km.png", desc: "" }, { name: "Rẽ trái", url: "./dist/images/trafic_signs/left-turn.png", desc: "" }, { name: "Nguy hiểm khác", url: "./dist/images/trafic_signs/other-danger.png", desc: "" }, { name: "Đi thẳng", url: "./dist/images/trafic_signs/go-straight.png", desc: "" }, { name: "Không đậu xe ", url: "./dist/images/trafic_signs/no-parking-2.png", desc: "" }, { name: "Chỉ vùng chứa Ôtô cấm quay đầu bên phải", url: "./dist/images/trafic_signs/no-right-turn-U-cars.png", desc: "" }, { name: "Vượt cấp với rào cản đường tàu", url: "./dist/images/trafic_signs/level-crossing-with-barriers.png", desc: "" }, { name: "Đèn giao thông (đỏ, xanh, vàng)", url: "./dist/images/trafic_signs/traffic-light.png", desc: "" }], trafficSignsList = document.querySelector("#trafficSignsList"), searchInput = document.querySelector("#searchInput"), loadMoreButton = document.querySelector("#loadMoreButton"), initialCount = 6; let displayedCount = initialCount; function displayTrafficSigns(e) {
    trafficSignsList.innerHTML = "", e.slice(0, displayedCount).forEach(e => {
        var t = document.createElement("div"); t.className = "sign-item", t.innerHTML = `
            <img src="${e.url}" alt="${e.name}" />
            <div class="sign-info">
                <h3>${e.name}</h3>
            </div>
        `, trafficSignsList.appendChild(t)
    }), loadMoreButton.style.display = displayedCount < e.length ? "block" : "none"
} function searchTrafficSigns(e) { const t = e.toLowerCase(); return trafic_signs.filter(e => e.name.toLowerCase().includes(t)) } let timeoutId; searchInput.addEventListener("input", () => { clearTimeout(timeoutId), timeoutId = setTimeout(() => { displayedCount = initialCount, displayTrafficSigns(searchTrafficSigns(searchInput.value)) }, 300) }), loadMoreButton.addEventListener("click", () => { displayedCount += initialCount, displayTrafficSigns(searchTrafficSigns(searchInput.value)) }), displayTrafficSigns(trafic_signs);